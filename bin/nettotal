#!/usr/bin/env python
from vitruvius.shared import ProcFile
import argparse
from time import time, sleep
from sys import exit, stderr
from re import match

DEFAULT_FORMAT = '{name} {downspeed}{downunit} {upspeed}{upunit}'
SOURCE = "/proc/net/dev"
INTERVAL = 1.0
PREFIXES = {"": 1, 'K': 1024, 'M': 1024**2, 'G': 1024**3}
IGNORE = ['lo', 'docker0']

def get_key(header_str):
    key = []
    for prefix, attrs in zip(('i', 'rx_', 'tx_'), header_str.split('|')):
        key += [prefix + attr for attr in attrs.strip().split()]
    return key

def line_to_status(line, key):
    status = {k: try_int(v) for k, v in zip(key, line.strip().split())}
    status["iface"] = status["iface"].rstrip(":")
    return status

def get_status(data, key):
    return {v["iface"]: v for v in [line_to_status(line, key) for line in data]}

def largest_prefix(value):
    if  value <= 1024:
        return ''
    for prefix in PREFIXES.keys():
        if  value > 1024:
            value /= 1024
        else:
            return prefix
    return prefix

def try_int(x):
    try:
        return int(x)
    except ValueError:
        return x

def print_format(name, values, unit="", template=DEFAULT_FORMAT, bits=False, precision=2, follow=False):
    # only do math on useful values
    keys = ["rx_bytes", "tx_bytes"]
    for k in keys:
        values[k] *= (8 if bits else 1)

    # or calculate units if not given
    if unit:
        units = {k: unit for k in keys}
    else:
        units = {k: largest_prefix(values[k]) for k in keys}
    # divide values by proper power
    for k in keys:
        values[k] /= PREFIXES[units[k]]
        units[k] += {True: 'b', False: 'B'}[bits]

    upprecision, downprecision = (precision,) * 2
    details = {"name": name,
               "upunit": units["tx_bytes"],
               "downunit": units["rx_bytes"],
               "upspeed": ("{:.%df}" % upprecision).format(values["tx_bytes"]),
               "downspeed": ("{:.%df}" % downprecision).format(values["rx_bytes"])}

    print(template.format(**details), flush=True)

if __name__ == "__main__":
    parser = argparse.ArgumentParser()
    parser.add_argument('-f', '--follow', action="store_true",
            help="print number of <format> transfered each second")
    parser.add_argument('-t', '--template', default=DEFAULT_FORMAT,
            help="python string template to print\n" +\
                 "valid args: {name} {upspeed} {downspeed} {upunits} {downunits}")
    parser.add_argument('-c', '--combine', action="store_true",
            help="print total of all interfaces")
    parser.add_argument('-u', '--unit', default='B',
            help="[KMG]?[Bb]: optional si prefix + <b>its or <B>ytes")
    parser.add_argument('-i', '--interval', type=float, default=INTERVAL,
            help="how many seconds between each print")
    parser.add_argument('-p', '--precision', type=int, default=0,
            help="number of decimal places")
    args = parser.parse_args()

    # Error on bad format
    if not match("^[KMG]?[Bb]$", args.unit):
        stderr.write("Invalid unit\n")
        exit(1)

    # coerce args for print_format()
    args.bits = {'b': True, 'B': False}[args.unit[-1]]
    args.unit = args.unit[:-1]
    combine = vars(args).pop("combine")
    interval = vars(args).pop("interval")

    # get the key
    source = ProcFile(SOURCE)
    data = source.read().strip().split('\n')
    key = get_key(data[1])

    # set the baseline for comparison
    previous_status = get_status(data[2:], key)

    # print the status
    while args.follow:
        start = time()

        # get new data
        data = source.read().strip().split('\n')[2:]
        status = [line_to_status(line, key) for line in data]

        # compare to previous data
        diff = {}
        for values in status:
            iface = values["iface"]
            if iface not in previous_status or iface in IGNORE: continue
            previous_values = previous_status[iface]
            diff[iface] = {k: (values[k] - previous_values[k]) / interval for k in key[1:]}

        if combine:
            diff = {"total": {k: sum(d[k] for d in diff.values()) for k in key[1:]}}

        # print diff
        for iface, values in diff.items():
            print_format(iface, values, **vars(args))

        # set up for next time
        previous_status = {values["iface"]: values for values in status}
        sleep(time() + interval - start)
    else:
        for index, status in previous_status.items():
            print_format(status.pop("iface"), status, **vars(args))
