#!/usr/bin/env bash
set -e
REMOTE=$1
SSH_DIR="$HOME/.ssh"
MOUNT_DIR="$HOME/remote"
REMOTE_DIR=$MOUNT_DIR/$REMOTE
PID_FILE="/tmp/$REMOTE.pid"
CONTROL_PATH=$SSH_DIR/$REMOTE.conn
FUNCTION_PATH="$HOME/.config/shell_functions/$REMOTE.remote.sh"
SSH_COMMAND="ssh -o ControlMaster=auto -o ControlPath=$CONTROL_PATH -o ServerAliveInterval=120"
SSHFS_OPTS="reconnect,cache=yes,dir_cache=yes,kernel_cache,cache_timeout=86400,attr_timeout=86400,entry_timeout=86400"

# check a remote server is given
[[ -z $REMOTE ]] && echo "no host given" && exit 1

# kill existing connection
if [[ -f "$PID_FILE" ]]; then
	xargs kill < "$PID_FILE" &>/dev/null || true
fi

# create connection
ssh -M -o ControlPath="$CONTROL_PATH" "$REMOTE" sleep infinity &>/dev/null &
echo "$!" > "$PID_FILE"

# mount connection
mkdir -p "$REMOTE_DIR"
fusermount3 -u "$REMOTE_DIR" &> /dev/null || true
sshfs "$REMOTE:." "$REMOTE_DIR" -o ssh_command="$SSH_COMMAND,$SSHFS_OPTS"

# functions to make running remote commands easier
cat > "$FUNCTION_PATH" << EOF
#!/usr/bin/env bash
function _in_$REMOTE() { # find where we are in the remote dir
	[[ ! \$(pwd) =~ "$REMOTE_DIR" ]] && return 1
	[[ \$1 == "-q" ]] && return 0
	pwd | sed 's;$REMOTE_DIR/\?;;'
}
function $REMOTE() {
	local remote_dir="\$(_in_$REMOTE)"
	if [[ ! -z "\$remote_dir" ]] && [[ ! -z "\$*" ]]; then
		$SSH_COMMAND "$REMOTE" "cd \$remote_dir && \$*"
	elif [[ ! -z "\$remote_dir" ]]; then
		$SSH_COMMAND -t "$REMOTE" "cd \$remote_dir && exec \\\$SHELL -l"
	else
		$SSH_COMMAND "$REMOTE" "\$@"
	fi
}
function disconnect-$REMOTE() {
	kill \$(cat $PID_FILE) 2>/dev/null
	rm $PID_FILE
	fusermount3 -u $REMOTE_DIR
	rmdir $REMOTE_DIR
}

function _in_remote() { # figure out which remote_dir we're in
	[[ ! \$(pwd) =~ "$MOUNT_DIR/" ]] && return 1
	pwd | sed -e 's;$MOUNT_DIR/\?\([^/]*\)/\?.*;\1;'
}
function git() {
	# small hack to speed up git from 20 minutes to 5 seconds;
	# still need to remove git section from powerline to be usable
	local remote_dir=\$(_in_remote)
	if [[ ! -z \$remote_dir ]]; then
		$SSH_COMMAND "$REMOTE" "cd \$(_in_\$remote_dir) && git \$*"
	else
		/usr/bin/git "\$@"
	fi
}
EOF
echo "now \`source $FUNCTION_PATH\`"
