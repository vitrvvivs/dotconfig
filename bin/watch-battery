#!/usr/bin/env python3
from vitruvius.shared import ProcFile
from time import sleep
from collections import deque
from math import inf

# settings
MEAN_TIME = 30
UPDATE_DELAY = 6
QUEUE_LENGTH = MEAN_TIME // UPDATE_DELAY

# global objects
file_charge_now = ProcFile("/sys/class/power_supply/BAT0/charge_now")
file_charge_full = ProcFile("/sys/class/power_supply/BAT0/charge_full")
max_charge = int(file_charge_full.read()) / 1000

# helpers
current_charge = lambda: int(file_charge_now.read()) / 1000
percent_full = lambda: current_charge() 

# loop setup
charge_last_tick = current_charge()
queue = deque([], QUEUE_LENGTH)

# sum(queue) = change in charge over MEAN_TIME

while True:
    charge_now = current_charge()

    charge_diff = charge_last_tick - charge_now
    queue.append(charge_diff)

    if sum(queue):
        time_left = charge_now / (sum(queue) * QUEUE_LENGTH / len(queue)) * MEAN_TIME
    else:
        time_left = inf
    for _ in range(UPDATE_DELAY):
        print("{:.1f}%".format(charge_now / max_charge * 100), end=' ')
        if time_left < inf:
            seconds = int(time_left)
            minutes = seconds // 60
            hours = minutes // 60
            print("{:02d}:{:02d}:{:02d} remaining".format(hours, minutes % 60, seconds % 60))
            time_left -= 1
        else:
            print("Indeterminate time remaining")
        sleep(1)

    charge_last_tick = charge_now
